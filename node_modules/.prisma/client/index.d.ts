
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  departmentId: string | null
  createdAt: Date
}

/**
 * Model IpAddress
 * 
 */
export type IpAddress = {
  ip: string
  machineId: string | null
}

/**
 * Model Department
 * 
 */
export type Department = {
  id: string
  name: string
}

/**
 * Model Machine
 * 
 */
export type Machine = {
  id: string
  ip: string
  processor: string | null
  memory: string | null
  storage: string | null
  system: string | null
  font: string | null
  motherboard: string | null
  createdAt: Date
}

/**
 * Model Maintenance
 * 
 */
export type Maintenance = {
  id: string
  userId: string
  departmentId: string
  machineId: string
  maintenanceDate: Date
  description: string | null
  createdAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.ipAddress`: Exposes CRUD operations for the **IpAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IpAddresses
    * const ipAddresses = await prisma.ipAddress.findMany()
    * ```
    */
  get ipAddress(): Prisma.IpAddressDelegate<GlobalReject>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<GlobalReject>;

  /**
   * `prisma.machine`: Exposes CRUD operations for the **Machine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Machines
    * const machines = await prisma.machine.findMany()
    * ```
    */
  get machine(): Prisma.MachineDelegate<GlobalReject>;

  /**
   * `prisma.maintenance`: Exposes CRUD operations for the **Maintenance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Maintenances
    * const maintenances = await prisma.maintenance.findMany()
    * ```
    */
  get maintenance(): Prisma.MaintenanceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    IpAddress: 'IpAddress',
    Department: 'Department',
    Machine: 'Machine',
    Maintenance: 'Maintenance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Maintenance: number
  }

  export type UserCountOutputTypeSelect = {
    Maintenance?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type DepartmentCountOutputType
   */


  export type DepartmentCountOutputType = {
    Maintenance: number
    User: number
  }

  export type DepartmentCountOutputTypeSelect = {
    Maintenance?: boolean
    User?: boolean
  }

  export type DepartmentCountOutputTypeGetPayload<S extends boolean | null | undefined | DepartmentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DepartmentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DepartmentCountOutputTypeArgs)
    ? DepartmentCountOutputType 
    : S extends { select: any } & (DepartmentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DepartmentCountOutputType ? DepartmentCountOutputType[P] : never
  } 
      : DepartmentCountOutputType




  // Custom InputTypes

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     * 
    **/
    select?: DepartmentCountOutputTypeSelect | null
  }



  /**
   * Count Type MachineCountOutputType
   */


  export type MachineCountOutputType = {
    Maintenance: number
  }

  export type MachineCountOutputTypeSelect = {
    Maintenance?: boolean
  }

  export type MachineCountOutputTypeGetPayload<S extends boolean | null | undefined | MachineCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MachineCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MachineCountOutputTypeArgs)
    ? MachineCountOutputType 
    : S extends { select: any } & (MachineCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MachineCountOutputType ? MachineCountOutputType[P] : never
  } 
      : MachineCountOutputType




  // Custom InputTypes

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MachineCountOutputType
     * 
    **/
    select?: MachineCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    departmentId: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    departmentId: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    departmentId: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    departmentId?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    departmentId?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    departmentId?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    departmentId: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    departmentId?: boolean
    createdAt?: boolean
    Maintenance?: boolean | UserMaintenanceArgs
    department?: boolean | DepartmentArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Maintenance?: boolean | UserMaintenanceArgs
    department?: boolean | DepartmentArgs
    _count?: boolean | UserCountOutputTypeArgs
  } 

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['include'][P]>>  :
        P extends 'department' ? DepartmentGetPayload<S['include'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['select'][P]>>  :
        P extends 'department' ? DepartmentGetPayload<S['select'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Maintenance<T extends UserMaintenanceArgs= {}>(args?: Subset<T, UserMaintenanceArgs>): PrismaPromise<Array<MaintenanceGetPayload<T>>| Null>;

    department<T extends DepartmentArgs= {}>(args?: Subset<T, DepartmentArgs>): Prisma__DepartmentClient<DepartmentGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User.Maintenance
   */
  export type UserMaintenanceArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    where?: MaintenanceWhereInput
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    cursor?: MaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model IpAddress
   */


  export type AggregateIpAddress = {
    _count: IpAddressCountAggregateOutputType | null
    _min: IpAddressMinAggregateOutputType | null
    _max: IpAddressMaxAggregateOutputType | null
  }

  export type IpAddressMinAggregateOutputType = {
    ip: string | null
    machineId: string | null
  }

  export type IpAddressMaxAggregateOutputType = {
    ip: string | null
    machineId: string | null
  }

  export type IpAddressCountAggregateOutputType = {
    ip: number
    machineId: number
    _all: number
  }


  export type IpAddressMinAggregateInputType = {
    ip?: true
    machineId?: true
  }

  export type IpAddressMaxAggregateInputType = {
    ip?: true
    machineId?: true
  }

  export type IpAddressCountAggregateInputType = {
    ip?: true
    machineId?: true
    _all?: true
  }

  export type IpAddressAggregateArgs = {
    /**
     * Filter which IpAddress to aggregate.
     * 
    **/
    where?: IpAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<IpAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IpAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IpAddresses
    **/
    _count?: true | IpAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IpAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IpAddressMaxAggregateInputType
  }

  export type GetIpAddressAggregateType<T extends IpAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateIpAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIpAddress[P]>
      : GetScalarType<T[P], AggregateIpAddress[P]>
  }




  export type IpAddressGroupByArgs = {
    where?: IpAddressWhereInput
    orderBy?: Enumerable<IpAddressOrderByWithAggregationInput>
    by: Array<IpAddressScalarFieldEnum>
    having?: IpAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IpAddressCountAggregateInputType | true
    _min?: IpAddressMinAggregateInputType
    _max?: IpAddressMaxAggregateInputType
  }


  export type IpAddressGroupByOutputType = {
    ip: string
    machineId: string | null
    _count: IpAddressCountAggregateOutputType | null
    _min: IpAddressMinAggregateOutputType | null
    _max: IpAddressMaxAggregateOutputType | null
  }

  type GetIpAddressGroupByPayload<T extends IpAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IpAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IpAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IpAddressGroupByOutputType[P]>
            : GetScalarType<T[P], IpAddressGroupByOutputType[P]>
        }
      >
    >


  export type IpAddressSelect = {
    ip?: boolean
    machineId?: boolean
    Machine?: boolean | MachineArgs
  }


  export type IpAddressInclude = {
    Machine?: boolean | MachineArgs
  } 

  export type IpAddressGetPayload<S extends boolean | null | undefined | IpAddressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? IpAddress :
    S extends undefined ? never :
    S extends { include: any } & (IpAddressArgs | IpAddressFindManyArgs)
    ? IpAddress  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Machine' ? MachineGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (IpAddressArgs | IpAddressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Machine' ? MachineGetPayload<S['select'][P]> | null :  P extends keyof IpAddress ? IpAddress[P] : never
  } 
      : IpAddress


  type IpAddressCountArgs = Merge<
    Omit<IpAddressFindManyArgs, 'select' | 'include'> & {
      select?: IpAddressCountAggregateInputType | true
    }
  >

  export interface IpAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one IpAddress that matches the filter.
     * @param {IpAddressFindUniqueArgs} args - Arguments to find a IpAddress
     * @example
     * // Get one IpAddress
     * const ipAddress = await prisma.ipAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IpAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IpAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'IpAddress'> extends True ? Prisma__IpAddressClient<IpAddressGetPayload<T>> : Prisma__IpAddressClient<IpAddressGetPayload<T> | null, null>

    /**
     * Find one IpAddress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IpAddressFindUniqueOrThrowArgs} args - Arguments to find a IpAddress
     * @example
     * // Get one IpAddress
     * const ipAddress = await prisma.ipAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IpAddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IpAddressFindUniqueOrThrowArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Find the first IpAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressFindFirstArgs} args - Arguments to find a IpAddress
     * @example
     * // Get one IpAddress
     * const ipAddress = await prisma.ipAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IpAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IpAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'IpAddress'> extends True ? Prisma__IpAddressClient<IpAddressGetPayload<T>> : Prisma__IpAddressClient<IpAddressGetPayload<T> | null, null>

    /**
     * Find the first IpAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressFindFirstOrThrowArgs} args - Arguments to find a IpAddress
     * @example
     * // Get one IpAddress
     * const ipAddress = await prisma.ipAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IpAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IpAddressFindFirstOrThrowArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Find zero or more IpAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IpAddresses
     * const ipAddresses = await prisma.ipAddress.findMany()
     * 
     * // Get first 10 IpAddresses
     * const ipAddresses = await prisma.ipAddress.findMany({ take: 10 })
     * 
     * // Only select the `ip`
     * const ipAddressWithIpOnly = await prisma.ipAddress.findMany({ select: { ip: true } })
     * 
    **/
    findMany<T extends IpAddressFindManyArgs>(
      args?: SelectSubset<T, IpAddressFindManyArgs>
    ): PrismaPromise<Array<IpAddressGetPayload<T>>>

    /**
     * Create a IpAddress.
     * @param {IpAddressCreateArgs} args - Arguments to create a IpAddress.
     * @example
     * // Create one IpAddress
     * const IpAddress = await prisma.ipAddress.create({
     *   data: {
     *     // ... data to create a IpAddress
     *   }
     * })
     * 
    **/
    create<T extends IpAddressCreateArgs>(
      args: SelectSubset<T, IpAddressCreateArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Create many IpAddresses.
     *     @param {IpAddressCreateManyArgs} args - Arguments to create many IpAddresses.
     *     @example
     *     // Create many IpAddresses
     *     const ipAddress = await prisma.ipAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IpAddressCreateManyArgs>(
      args?: SelectSubset<T, IpAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a IpAddress.
     * @param {IpAddressDeleteArgs} args - Arguments to delete one IpAddress.
     * @example
     * // Delete one IpAddress
     * const IpAddress = await prisma.ipAddress.delete({
     *   where: {
     *     // ... filter to delete one IpAddress
     *   }
     * })
     * 
    **/
    delete<T extends IpAddressDeleteArgs>(
      args: SelectSubset<T, IpAddressDeleteArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Update one IpAddress.
     * @param {IpAddressUpdateArgs} args - Arguments to update one IpAddress.
     * @example
     * // Update one IpAddress
     * const ipAddress = await prisma.ipAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IpAddressUpdateArgs>(
      args: SelectSubset<T, IpAddressUpdateArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Delete zero or more IpAddresses.
     * @param {IpAddressDeleteManyArgs} args - Arguments to filter IpAddresses to delete.
     * @example
     * // Delete a few IpAddresses
     * const { count } = await prisma.ipAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IpAddressDeleteManyArgs>(
      args?: SelectSubset<T, IpAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more IpAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IpAddresses
     * const ipAddress = await prisma.ipAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IpAddressUpdateManyArgs>(
      args: SelectSubset<T, IpAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one IpAddress.
     * @param {IpAddressUpsertArgs} args - Arguments to update or create a IpAddress.
     * @example
     * // Update or create a IpAddress
     * const ipAddress = await prisma.ipAddress.upsert({
     *   create: {
     *     // ... data to create a IpAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IpAddress we want to update
     *   }
     * })
    **/
    upsert<T extends IpAddressUpsertArgs>(
      args: SelectSubset<T, IpAddressUpsertArgs>
    ): Prisma__IpAddressClient<IpAddressGetPayload<T>>

    /**
     * Count the number of IpAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressCountArgs} args - Arguments to filter IpAddresses to count.
     * @example
     * // Count the number of IpAddresses
     * const count = await prisma.ipAddress.count({
     *   where: {
     *     // ... the filter for the IpAddresses we want to count
     *   }
     * })
    **/
    count<T extends IpAddressCountArgs>(
      args?: Subset<T, IpAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IpAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IpAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IpAddressAggregateArgs>(args: Subset<T, IpAddressAggregateArgs>): PrismaPromise<GetIpAddressAggregateType<T>>

    /**
     * Group by IpAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IpAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IpAddressGroupByArgs['orderBy'] }
        : { orderBy?: IpAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IpAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIpAddressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for IpAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IpAddressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Machine<T extends MachineArgs= {}>(args?: Subset<T, MachineArgs>): Prisma__MachineClient<MachineGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * IpAddress base type for findUnique actions
   */
  export type IpAddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter, which IpAddress to fetch.
     * 
    **/
    where: IpAddressWhereUniqueInput
  }

  /**
   * IpAddress findUnique
   */
  export interface IpAddressFindUniqueArgs extends IpAddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IpAddress findUniqueOrThrow
   */
  export type IpAddressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter, which IpAddress to fetch.
     * 
    **/
    where: IpAddressWhereUniqueInput
  }


  /**
   * IpAddress base type for findFirst actions
   */
  export type IpAddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter, which IpAddress to fetch.
     * 
    **/
    where?: IpAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<IpAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpAddresses.
     * 
    **/
    cursor?: IpAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpAddresses.
     * 
    **/
    distinct?: Enumerable<IpAddressScalarFieldEnum>
  }

  /**
   * IpAddress findFirst
   */
  export interface IpAddressFindFirstArgs extends IpAddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IpAddress findFirstOrThrow
   */
  export type IpAddressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter, which IpAddress to fetch.
     * 
    **/
    where?: IpAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<IpAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpAddresses.
     * 
    **/
    cursor?: IpAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpAddresses.
     * 
    **/
    distinct?: Enumerable<IpAddressScalarFieldEnum>
  }


  /**
   * IpAddress findMany
   */
  export type IpAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter, which IpAddresses to fetch.
     * 
    **/
    where?: IpAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<IpAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IpAddresses.
     * 
    **/
    cursor?: IpAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IpAddressScalarFieldEnum>
  }


  /**
   * IpAddress create
   */
  export type IpAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * The data needed to create a IpAddress.
     * 
    **/
    data: XOR<IpAddressCreateInput, IpAddressUncheckedCreateInput>
  }


  /**
   * IpAddress createMany
   */
  export type IpAddressCreateManyArgs = {
    /**
     * The data used to create many IpAddresses.
     * 
    **/
    data: Enumerable<IpAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * IpAddress update
   */
  export type IpAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * The data needed to update a IpAddress.
     * 
    **/
    data: XOR<IpAddressUpdateInput, IpAddressUncheckedUpdateInput>
    /**
     * Choose, which IpAddress to update.
     * 
    **/
    where: IpAddressWhereUniqueInput
  }


  /**
   * IpAddress updateMany
   */
  export type IpAddressUpdateManyArgs = {
    /**
     * The data used to update IpAddresses.
     * 
    **/
    data: XOR<IpAddressUpdateManyMutationInput, IpAddressUncheckedUpdateManyInput>
    /**
     * Filter which IpAddresses to update
     * 
    **/
    where?: IpAddressWhereInput
  }


  /**
   * IpAddress upsert
   */
  export type IpAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * The filter to search for the IpAddress to update in case it exists.
     * 
    **/
    where: IpAddressWhereUniqueInput
    /**
     * In case the IpAddress found by the `where` argument doesn't exist, create a new IpAddress with this data.
     * 
    **/
    create: XOR<IpAddressCreateInput, IpAddressUncheckedCreateInput>
    /**
     * In case the IpAddress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IpAddressUpdateInput, IpAddressUncheckedUpdateInput>
  }


  /**
   * IpAddress delete
   */
  export type IpAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
    /**
     * Filter which IpAddress to delete.
     * 
    **/
    where: IpAddressWhereUniqueInput
  }


  /**
   * IpAddress deleteMany
   */
  export type IpAddressDeleteManyArgs = {
    /**
     * Filter which IpAddresses to delete
     * 
    **/
    where?: IpAddressWhereInput
  }


  /**
   * IpAddress without action
   */
  export type IpAddressArgs = {
    /**
     * Select specific fields to fetch from the IpAddress
     * 
    **/
    select?: IpAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IpAddressInclude | null
  }



  /**
   * Model Department
   */


  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DepartmentAggregateArgs = {
    /**
     * Filter which Department to aggregate.
     * 
    **/
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     * 
    **/
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs = {
    where?: DepartmentWhereInput
    orderBy?: Enumerable<DepartmentOrderByWithAggregationInput>
    by: Array<DepartmentScalarFieldEnum>
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }


  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect = {
    id?: boolean
    name?: boolean
    Maintenance?: boolean | DepartmentMaintenanceArgs
    User?: boolean | DepartmentUserArgs
    _count?: boolean | DepartmentCountOutputTypeArgs
  }


  export type DepartmentInclude = {
    Maintenance?: boolean | DepartmentMaintenanceArgs
    User?: boolean | DepartmentUserArgs
    _count?: boolean | DepartmentCountOutputTypeArgs
  } 

  export type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Department :
    S extends undefined ? never :
    S extends { include: any } & (DepartmentArgs | DepartmentFindManyArgs)
    ? Department  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['include'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? DepartmentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DepartmentArgs | DepartmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['select'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? DepartmentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Department ? Department[P] : never
  } 
      : Department


  type DepartmentCountArgs = Merge<
    Omit<DepartmentFindManyArgs, 'select' | 'include'> & {
      select?: DepartmentCountAggregateInputType | true
    }
  >

  export interface DepartmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DepartmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Department'> extends True ? Prisma__DepartmentClient<DepartmentGetPayload<T>> : Prisma__DepartmentClient<DepartmentGetPayload<T> | null, null>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DepartmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Department'> extends True ? Prisma__DepartmentClient<DepartmentGetPayload<T>> : Prisma__DepartmentClient<DepartmentGetPayload<T> | null, null>

    /**
     * Find the first Department that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs>(
      args?: SelectSubset<T, DepartmentFindManyArgs>
    ): PrismaPromise<Array<DepartmentGetPayload<T>>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs>(
      args: SelectSubset<T, DepartmentCreateArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Create many Departments.
     *     @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     *     @example
     *     // Create many Departments
     *     const department = await prisma.department.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DepartmentCreateManyArgs>(
      args?: SelectSubset<T, DepartmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs>(
      args: SelectSubset<T, DepartmentDeleteArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs>(
      args: SelectSubset<T, DepartmentUpdateArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs>(
      args: SelectSubset<T, DepartmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs>(
      args: SelectSubset<T, DepartmentUpsertArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DepartmentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Maintenance<T extends DepartmentMaintenanceArgs= {}>(args?: Subset<T, DepartmentMaintenanceArgs>): PrismaPromise<Array<MaintenanceGetPayload<T>>| Null>;

    User<T extends DepartmentUserArgs= {}>(args?: Subset<T, DepartmentUserArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Department base type for findUnique actions
   */
  export type DepartmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     * 
    **/
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUnique
   */
  export interface DepartmentFindUniqueArgs extends DepartmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     * 
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department base type for findFirst actions
   */
  export type DepartmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     * 
    **/
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     * 
    **/
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     * 
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     * 
    **/
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }

  /**
   * Department findFirst
   */
  export interface DepartmentFindFirstArgs extends DepartmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     * 
    **/
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     * 
    **/
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     * 
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     * 
    **/
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter, which Departments to fetch.
     * 
    **/
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     * 
    **/
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     * 
    **/
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * The data needed to create a Department.
     * 
    **/
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs = {
    /**
     * The data used to create many Departments.
     * 
    **/
    data: Enumerable<DepartmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * The data needed to update a Department.
     * 
    **/
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     * 
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs = {
    /**
     * The data used to update Departments.
     * 
    **/
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     * 
    **/
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * The filter to search for the Department to update in case it exists.
     * 
    **/
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     * 
    **/
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
    /**
     * Filter which Department to delete.
     * 
    **/
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs = {
    /**
     * Filter which Departments to delete
     * 
    **/
    where?: DepartmentWhereInput
  }


  /**
   * Department.Maintenance
   */
  export type DepartmentMaintenanceArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    where?: MaintenanceWhereInput
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    cursor?: MaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }


  /**
   * Department.User
   */
  export type DepartmentUserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Department without action
   */
  export type DepartmentArgs = {
    /**
     * Select specific fields to fetch from the Department
     * 
    **/
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DepartmentInclude | null
  }



  /**
   * Model Machine
   */


  export type AggregateMachine = {
    _count: MachineCountAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  export type MachineMinAggregateOutputType = {
    id: string | null
    ip: string | null
    processor: string | null
    memory: string | null
    storage: string | null
    system: string | null
    font: string | null
    motherboard: string | null
    createdAt: Date | null
  }

  export type MachineMaxAggregateOutputType = {
    id: string | null
    ip: string | null
    processor: string | null
    memory: string | null
    storage: string | null
    system: string | null
    font: string | null
    motherboard: string | null
    createdAt: Date | null
  }

  export type MachineCountAggregateOutputType = {
    id: number
    ip: number
    processor: number
    memory: number
    storage: number
    system: number
    font: number
    motherboard: number
    createdAt: number
    _all: number
  }


  export type MachineMinAggregateInputType = {
    id?: true
    ip?: true
    processor?: true
    memory?: true
    storage?: true
    system?: true
    font?: true
    motherboard?: true
    createdAt?: true
  }

  export type MachineMaxAggregateInputType = {
    id?: true
    ip?: true
    processor?: true
    memory?: true
    storage?: true
    system?: true
    font?: true
    motherboard?: true
    createdAt?: true
  }

  export type MachineCountAggregateInputType = {
    id?: true
    ip?: true
    processor?: true
    memory?: true
    storage?: true
    system?: true
    font?: true
    motherboard?: true
    createdAt?: true
    _all?: true
  }

  export type MachineAggregateArgs = {
    /**
     * Filter which Machine to aggregate.
     * 
    **/
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     * 
    **/
    orderBy?: Enumerable<MachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Machines
    **/
    _count?: true | MachineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachineMaxAggregateInputType
  }

  export type GetMachineAggregateType<T extends MachineAggregateArgs> = {
        [P in keyof T & keyof AggregateMachine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachine[P]>
      : GetScalarType<T[P], AggregateMachine[P]>
  }




  export type MachineGroupByArgs = {
    where?: MachineWhereInput
    orderBy?: Enumerable<MachineOrderByWithAggregationInput>
    by: Array<MachineScalarFieldEnum>
    having?: MachineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachineCountAggregateInputType | true
    _min?: MachineMinAggregateInputType
    _max?: MachineMaxAggregateInputType
  }


  export type MachineGroupByOutputType = {
    id: string
    ip: string
    processor: string | null
    memory: string | null
    storage: string | null
    system: string | null
    font: string | null
    motherboard: string | null
    createdAt: Date
    _count: MachineCountAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  type GetMachineGroupByPayload<T extends MachineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MachineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachineGroupByOutputType[P]>
            : GetScalarType<T[P], MachineGroupByOutputType[P]>
        }
      >
    >


  export type MachineSelect = {
    id?: boolean
    ip?: boolean
    processor?: boolean
    memory?: boolean
    storage?: boolean
    system?: boolean
    font?: boolean
    motherboard?: boolean
    createdAt?: boolean
    ipAddress?: boolean | IpAddressArgs
    Maintenance?: boolean | MachineMaintenanceArgs
    _count?: boolean | MachineCountOutputTypeArgs
  }


  export type MachineInclude = {
    ipAddress?: boolean | IpAddressArgs
    Maintenance?: boolean | MachineMaintenanceArgs
    _count?: boolean | MachineCountOutputTypeArgs
  } 

  export type MachineGetPayload<S extends boolean | null | undefined | MachineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Machine :
    S extends undefined ? never :
    S extends { include: any } & (MachineArgs | MachineFindManyArgs)
    ? Machine  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ipAddress' ? IpAddressGetPayload<S['include'][P]> :
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['include'][P]>>  :
        P extends '_count' ? MachineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MachineArgs | MachineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ipAddress' ? IpAddressGetPayload<S['select'][P]> :
        P extends 'Maintenance' ? Array < MaintenanceGetPayload<S['select'][P]>>  :
        P extends '_count' ? MachineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Machine ? Machine[P] : never
  } 
      : Machine


  type MachineCountArgs = Merge<
    Omit<MachineFindManyArgs, 'select' | 'include'> & {
      select?: MachineCountAggregateInputType | true
    }
  >

  export interface MachineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Machine that matches the filter.
     * @param {MachineFindUniqueArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MachineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MachineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Machine'> extends True ? Prisma__MachineClient<MachineGetPayload<T>> : Prisma__MachineClient<MachineGetPayload<T> | null, null>

    /**
     * Find one Machine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MachineFindUniqueOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MachineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MachineFindUniqueOrThrowArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Find the first Machine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MachineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MachineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Machine'> extends True ? Prisma__MachineClient<MachineGetPayload<T>> : Prisma__MachineClient<MachineGetPayload<T> | null, null>

    /**
     * Find the first Machine that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MachineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MachineFindFirstOrThrowArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Find zero or more Machines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Machines
     * const machines = await prisma.machine.findMany()
     * 
     * // Get first 10 Machines
     * const machines = await prisma.machine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machineWithIdOnly = await prisma.machine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MachineFindManyArgs>(
      args?: SelectSubset<T, MachineFindManyArgs>
    ): PrismaPromise<Array<MachineGetPayload<T>>>

    /**
     * Create a Machine.
     * @param {MachineCreateArgs} args - Arguments to create a Machine.
     * @example
     * // Create one Machine
     * const Machine = await prisma.machine.create({
     *   data: {
     *     // ... data to create a Machine
     *   }
     * })
     * 
    **/
    create<T extends MachineCreateArgs>(
      args: SelectSubset<T, MachineCreateArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Create many Machines.
     *     @param {MachineCreateManyArgs} args - Arguments to create many Machines.
     *     @example
     *     // Create many Machines
     *     const machine = await prisma.machine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MachineCreateManyArgs>(
      args?: SelectSubset<T, MachineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Machine.
     * @param {MachineDeleteArgs} args - Arguments to delete one Machine.
     * @example
     * // Delete one Machine
     * const Machine = await prisma.machine.delete({
     *   where: {
     *     // ... filter to delete one Machine
     *   }
     * })
     * 
    **/
    delete<T extends MachineDeleteArgs>(
      args: SelectSubset<T, MachineDeleteArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Update one Machine.
     * @param {MachineUpdateArgs} args - Arguments to update one Machine.
     * @example
     * // Update one Machine
     * const machine = await prisma.machine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MachineUpdateArgs>(
      args: SelectSubset<T, MachineUpdateArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Delete zero or more Machines.
     * @param {MachineDeleteManyArgs} args - Arguments to filter Machines to delete.
     * @example
     * // Delete a few Machines
     * const { count } = await prisma.machine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MachineDeleteManyArgs>(
      args?: SelectSubset<T, MachineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Machines
     * const machine = await prisma.machine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MachineUpdateManyArgs>(
      args: SelectSubset<T, MachineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Machine.
     * @param {MachineUpsertArgs} args - Arguments to update or create a Machine.
     * @example
     * // Update or create a Machine
     * const machine = await prisma.machine.upsert({
     *   create: {
     *     // ... data to create a Machine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Machine we want to update
     *   }
     * })
    **/
    upsert<T extends MachineUpsertArgs>(
      args: SelectSubset<T, MachineUpsertArgs>
    ): Prisma__MachineClient<MachineGetPayload<T>>

    /**
     * Count the number of Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineCountArgs} args - Arguments to filter Machines to count.
     * @example
     * // Count the number of Machines
     * const count = await prisma.machine.count({
     *   where: {
     *     // ... the filter for the Machines we want to count
     *   }
     * })
    **/
    count<T extends MachineCountArgs>(
      args?: Subset<T, MachineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachineAggregateArgs>(args: Subset<T, MachineAggregateArgs>): PrismaPromise<GetMachineAggregateType<T>>

    /**
     * Group by Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachineGroupByArgs['orderBy'] }
        : { orderBy?: MachineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachineGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Machine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MachineClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ipAddress<T extends IpAddressArgs= {}>(args?: Subset<T, IpAddressArgs>): Prisma__IpAddressClient<IpAddressGetPayload<T> | Null>;

    Maintenance<T extends MachineMaintenanceArgs= {}>(args?: Subset<T, MachineMaintenanceArgs>): PrismaPromise<Array<MaintenanceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Machine base type for findUnique actions
   */
  export type MachineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter, which Machine to fetch.
     * 
    **/
    where: MachineWhereUniqueInput
  }

  /**
   * Machine findUnique
   */
  export interface MachineFindUniqueArgs extends MachineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Machine findUniqueOrThrow
   */
  export type MachineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter, which Machine to fetch.
     * 
    **/
    where: MachineWhereUniqueInput
  }


  /**
   * Machine base type for findFirst actions
   */
  export type MachineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter, which Machine to fetch.
     * 
    **/
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     * 
    **/
    orderBy?: Enumerable<MachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     * 
    **/
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     * 
    **/
    distinct?: Enumerable<MachineScalarFieldEnum>
  }

  /**
   * Machine findFirst
   */
  export interface MachineFindFirstArgs extends MachineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Machine findFirstOrThrow
   */
  export type MachineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter, which Machine to fetch.
     * 
    **/
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     * 
    **/
    orderBy?: Enumerable<MachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     * 
    **/
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     * 
    **/
    distinct?: Enumerable<MachineScalarFieldEnum>
  }


  /**
   * Machine findMany
   */
  export type MachineFindManyArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter, which Machines to fetch.
     * 
    **/
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     * 
    **/
    orderBy?: Enumerable<MachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Machines.
     * 
    **/
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MachineScalarFieldEnum>
  }


  /**
   * Machine create
   */
  export type MachineCreateArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * The data needed to create a Machine.
     * 
    **/
    data: XOR<MachineCreateInput, MachineUncheckedCreateInput>
  }


  /**
   * Machine createMany
   */
  export type MachineCreateManyArgs = {
    /**
     * The data used to create many Machines.
     * 
    **/
    data: Enumerable<MachineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Machine update
   */
  export type MachineUpdateArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * The data needed to update a Machine.
     * 
    **/
    data: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
    /**
     * Choose, which Machine to update.
     * 
    **/
    where: MachineWhereUniqueInput
  }


  /**
   * Machine updateMany
   */
  export type MachineUpdateManyArgs = {
    /**
     * The data used to update Machines.
     * 
    **/
    data: XOR<MachineUpdateManyMutationInput, MachineUncheckedUpdateManyInput>
    /**
     * Filter which Machines to update
     * 
    **/
    where?: MachineWhereInput
  }


  /**
   * Machine upsert
   */
  export type MachineUpsertArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * The filter to search for the Machine to update in case it exists.
     * 
    **/
    where: MachineWhereUniqueInput
    /**
     * In case the Machine found by the `where` argument doesn't exist, create a new Machine with this data.
     * 
    **/
    create: XOR<MachineCreateInput, MachineUncheckedCreateInput>
    /**
     * In case the Machine was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
  }


  /**
   * Machine delete
   */
  export type MachineDeleteArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
    /**
     * Filter which Machine to delete.
     * 
    **/
    where: MachineWhereUniqueInput
  }


  /**
   * Machine deleteMany
   */
  export type MachineDeleteManyArgs = {
    /**
     * Filter which Machines to delete
     * 
    **/
    where?: MachineWhereInput
  }


  /**
   * Machine.Maintenance
   */
  export type MachineMaintenanceArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    where?: MaintenanceWhereInput
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    cursor?: MaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }


  /**
   * Machine without action
   */
  export type MachineArgs = {
    /**
     * Select specific fields to fetch from the Machine
     * 
    **/
    select?: MachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MachineInclude | null
  }



  /**
   * Model Maintenance
   */


  export type AggregateMaintenance = {
    _count: MaintenanceCountAggregateOutputType | null
    _min: MaintenanceMinAggregateOutputType | null
    _max: MaintenanceMaxAggregateOutputType | null
  }

  export type MaintenanceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    machineId: string | null
    maintenanceDate: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type MaintenanceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    machineId: string | null
    maintenanceDate: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type MaintenanceCountAggregateOutputType = {
    id: number
    userId: number
    departmentId: number
    machineId: number
    maintenanceDate: number
    description: number
    createdAt: number
    _all: number
  }


  export type MaintenanceMinAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    machineId?: true
    maintenanceDate?: true
    description?: true
    createdAt?: true
  }

  export type MaintenanceMaxAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    machineId?: true
    maintenanceDate?: true
    description?: true
    createdAt?: true
  }

  export type MaintenanceCountAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    machineId?: true
    maintenanceDate?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type MaintenanceAggregateArgs = {
    /**
     * Filter which Maintenance to aggregate.
     * 
    **/
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     * 
    **/
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Maintenances
    **/
    _count?: true | MaintenanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceMaxAggregateInputType
  }

  export type GetMaintenanceAggregateType<T extends MaintenanceAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenance[P]>
      : GetScalarType<T[P], AggregateMaintenance[P]>
  }




  export type MaintenanceGroupByArgs = {
    where?: MaintenanceWhereInput
    orderBy?: Enumerable<MaintenanceOrderByWithAggregationInput>
    by: Array<MaintenanceScalarFieldEnum>
    having?: MaintenanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceCountAggregateInputType | true
    _min?: MaintenanceMinAggregateInputType
    _max?: MaintenanceMaxAggregateInputType
  }


  export type MaintenanceGroupByOutputType = {
    id: string
    userId: string
    departmentId: string
    machineId: string
    maintenanceDate: Date
    description: string | null
    createdAt: Date
    _count: MaintenanceCountAggregateOutputType | null
    _min: MaintenanceMinAggregateOutputType | null
    _max: MaintenanceMaxAggregateOutputType | null
  }

  type GetMaintenanceGroupByPayload<T extends MaintenanceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MaintenanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceSelect = {
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    machineId?: boolean
    maintenanceDate?: boolean
    description?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    department?: boolean | DepartmentArgs
    machine?: boolean | MachineArgs
  }


  export type MaintenanceInclude = {
    user?: boolean | UserArgs
    department?: boolean | DepartmentArgs
    machine?: boolean | MachineArgs
  } 

  export type MaintenanceGetPayload<S extends boolean | null | undefined | MaintenanceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Maintenance :
    S extends undefined ? never :
    S extends { include: any } & (MaintenanceArgs | MaintenanceFindManyArgs)
    ? Maintenance  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'department' ? DepartmentGetPayload<S['include'][P]> :
        P extends 'machine' ? MachineGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MaintenanceArgs | MaintenanceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'department' ? DepartmentGetPayload<S['select'][P]> :
        P extends 'machine' ? MachineGetPayload<S['select'][P]> :  P extends keyof Maintenance ? Maintenance[P] : never
  } 
      : Maintenance


  type MaintenanceCountArgs = Merge<
    Omit<MaintenanceFindManyArgs, 'select' | 'include'> & {
      select?: MaintenanceCountAggregateInputType | true
    }
  >

  export interface MaintenanceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Maintenance that matches the filter.
     * @param {MaintenanceFindUniqueArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MaintenanceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MaintenanceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Maintenance'> extends True ? Prisma__MaintenanceClient<MaintenanceGetPayload<T>> : Prisma__MaintenanceClient<MaintenanceGetPayload<T> | null, null>

    /**
     * Find one Maintenance that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MaintenanceFindUniqueOrThrowArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MaintenanceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MaintenanceFindUniqueOrThrowArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Find the first Maintenance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindFirstArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MaintenanceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MaintenanceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Maintenance'> extends True ? Prisma__MaintenanceClient<MaintenanceGetPayload<T>> : Prisma__MaintenanceClient<MaintenanceGetPayload<T> | null, null>

    /**
     * Find the first Maintenance that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindFirstOrThrowArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MaintenanceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MaintenanceFindFirstOrThrowArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Find zero or more Maintenances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Maintenances
     * const maintenances = await prisma.maintenance.findMany()
     * 
     * // Get first 10 Maintenances
     * const maintenances = await prisma.maintenance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceWithIdOnly = await prisma.maintenance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MaintenanceFindManyArgs>(
      args?: SelectSubset<T, MaintenanceFindManyArgs>
    ): PrismaPromise<Array<MaintenanceGetPayload<T>>>

    /**
     * Create a Maintenance.
     * @param {MaintenanceCreateArgs} args - Arguments to create a Maintenance.
     * @example
     * // Create one Maintenance
     * const Maintenance = await prisma.maintenance.create({
     *   data: {
     *     // ... data to create a Maintenance
     *   }
     * })
     * 
    **/
    create<T extends MaintenanceCreateArgs>(
      args: SelectSubset<T, MaintenanceCreateArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Create many Maintenances.
     *     @param {MaintenanceCreateManyArgs} args - Arguments to create many Maintenances.
     *     @example
     *     // Create many Maintenances
     *     const maintenance = await prisma.maintenance.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MaintenanceCreateManyArgs>(
      args?: SelectSubset<T, MaintenanceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Maintenance.
     * @param {MaintenanceDeleteArgs} args - Arguments to delete one Maintenance.
     * @example
     * // Delete one Maintenance
     * const Maintenance = await prisma.maintenance.delete({
     *   where: {
     *     // ... filter to delete one Maintenance
     *   }
     * })
     * 
    **/
    delete<T extends MaintenanceDeleteArgs>(
      args: SelectSubset<T, MaintenanceDeleteArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Update one Maintenance.
     * @param {MaintenanceUpdateArgs} args - Arguments to update one Maintenance.
     * @example
     * // Update one Maintenance
     * const maintenance = await prisma.maintenance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MaintenanceUpdateArgs>(
      args: SelectSubset<T, MaintenanceUpdateArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Delete zero or more Maintenances.
     * @param {MaintenanceDeleteManyArgs} args - Arguments to filter Maintenances to delete.
     * @example
     * // Delete a few Maintenances
     * const { count } = await prisma.maintenance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MaintenanceDeleteManyArgs>(
      args?: SelectSubset<T, MaintenanceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Maintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Maintenances
     * const maintenance = await prisma.maintenance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MaintenanceUpdateManyArgs>(
      args: SelectSubset<T, MaintenanceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Maintenance.
     * @param {MaintenanceUpsertArgs} args - Arguments to update or create a Maintenance.
     * @example
     * // Update or create a Maintenance
     * const maintenance = await prisma.maintenance.upsert({
     *   create: {
     *     // ... data to create a Maintenance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Maintenance we want to update
     *   }
     * })
    **/
    upsert<T extends MaintenanceUpsertArgs>(
      args: SelectSubset<T, MaintenanceUpsertArgs>
    ): Prisma__MaintenanceClient<MaintenanceGetPayload<T>>

    /**
     * Count the number of Maintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceCountArgs} args - Arguments to filter Maintenances to count.
     * @example
     * // Count the number of Maintenances
     * const count = await prisma.maintenance.count({
     *   where: {
     *     // ... the filter for the Maintenances we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceCountArgs>(
      args?: Subset<T, MaintenanceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Maintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceAggregateArgs>(args: Subset<T, MaintenanceAggregateArgs>): PrismaPromise<GetMaintenanceAggregateType<T>>

    /**
     * Group by Maintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Maintenance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MaintenanceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    department<T extends DepartmentArgs= {}>(args?: Subset<T, DepartmentArgs>): Prisma__DepartmentClient<DepartmentGetPayload<T> | Null>;

    machine<T extends MachineArgs= {}>(args?: Subset<T, MachineArgs>): Prisma__MachineClient<MachineGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Maintenance base type for findUnique actions
   */
  export type MaintenanceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter, which Maintenance to fetch.
     * 
    **/
    where: MaintenanceWhereUniqueInput
  }

  /**
   * Maintenance findUnique
   */
  export interface MaintenanceFindUniqueArgs extends MaintenanceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Maintenance findUniqueOrThrow
   */
  export type MaintenanceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter, which Maintenance to fetch.
     * 
    **/
    where: MaintenanceWhereUniqueInput
  }


  /**
   * Maintenance base type for findFirst actions
   */
  export type MaintenanceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter, which Maintenance to fetch.
     * 
    **/
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     * 
    **/
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maintenances.
     * 
    **/
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maintenances.
     * 
    **/
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }

  /**
   * Maintenance findFirst
   */
  export interface MaintenanceFindFirstArgs extends MaintenanceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Maintenance findFirstOrThrow
   */
  export type MaintenanceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter, which Maintenance to fetch.
     * 
    **/
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     * 
    **/
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maintenances.
     * 
    **/
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maintenances.
     * 
    **/
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }


  /**
   * Maintenance findMany
   */
  export type MaintenanceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter, which Maintenances to fetch.
     * 
    **/
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     * 
    **/
    orderBy?: Enumerable<MaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Maintenances.
     * 
    **/
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MaintenanceScalarFieldEnum>
  }


  /**
   * Maintenance create
   */
  export type MaintenanceCreateArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * The data needed to create a Maintenance.
     * 
    **/
    data: XOR<MaintenanceCreateInput, MaintenanceUncheckedCreateInput>
  }


  /**
   * Maintenance createMany
   */
  export type MaintenanceCreateManyArgs = {
    /**
     * The data used to create many Maintenances.
     * 
    **/
    data: Enumerable<MaintenanceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Maintenance update
   */
  export type MaintenanceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * The data needed to update a Maintenance.
     * 
    **/
    data: XOR<MaintenanceUpdateInput, MaintenanceUncheckedUpdateInput>
    /**
     * Choose, which Maintenance to update.
     * 
    **/
    where: MaintenanceWhereUniqueInput
  }


  /**
   * Maintenance updateMany
   */
  export type MaintenanceUpdateManyArgs = {
    /**
     * The data used to update Maintenances.
     * 
    **/
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyInput>
    /**
     * Filter which Maintenances to update
     * 
    **/
    where?: MaintenanceWhereInput
  }


  /**
   * Maintenance upsert
   */
  export type MaintenanceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * The filter to search for the Maintenance to update in case it exists.
     * 
    **/
    where: MaintenanceWhereUniqueInput
    /**
     * In case the Maintenance found by the `where` argument doesn't exist, create a new Maintenance with this data.
     * 
    **/
    create: XOR<MaintenanceCreateInput, MaintenanceUncheckedCreateInput>
    /**
     * In case the Maintenance was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MaintenanceUpdateInput, MaintenanceUncheckedUpdateInput>
  }


  /**
   * Maintenance delete
   */
  export type MaintenanceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
    /**
     * Filter which Maintenance to delete.
     * 
    **/
    where: MaintenanceWhereUniqueInput
  }


  /**
   * Maintenance deleteMany
   */
  export type MaintenanceDeleteManyArgs = {
    /**
     * Filter which Maintenances to delete
     * 
    **/
    where?: MaintenanceWhereInput
  }


  /**
   * Maintenance without action
   */
  export type MaintenanceArgs = {
    /**
     * Select specific fields to fetch from the Maintenance
     * 
    **/
    select?: MaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MaintenanceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const IpAddressScalarFieldEnum: {
    ip: 'ip',
    machineId: 'machineId'
  };

  export type IpAddressScalarFieldEnum = (typeof IpAddressScalarFieldEnum)[keyof typeof IpAddressScalarFieldEnum]


  export const MachineScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    processor: 'processor',
    memory: 'memory',
    storage: 'storage',
    system: 'system',
    font: 'font',
    motherboard: 'motherboard',
    createdAt: 'createdAt'
  };

  export type MachineScalarFieldEnum = (typeof MachineScalarFieldEnum)[keyof typeof MachineScalarFieldEnum]


  export const MaintenanceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    departmentId: 'departmentId',
    machineId: 'machineId',
    maintenanceDate: 'maintenanceDate',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type MaintenanceScalarFieldEnum = (typeof MaintenanceScalarFieldEnum)[keyof typeof MaintenanceScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    departmentId: 'departmentId',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    departmentId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    Maintenance?: MaintenanceListRelationFilter
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    Maintenance?: MaintenanceOrderByRelationAggregateInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    departmentId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type IpAddressWhereInput = {
    AND?: Enumerable<IpAddressWhereInput>
    OR?: Enumerable<IpAddressWhereInput>
    NOT?: Enumerable<IpAddressWhereInput>
    ip?: StringFilter | string
    machineId?: StringNullableFilter | string | null
    Machine?: XOR<MachineRelationFilter, MachineWhereInput> | null
  }

  export type IpAddressOrderByWithRelationInput = {
    ip?: SortOrder
    machineId?: SortOrder
    Machine?: MachineOrderByWithRelationInput
  }

  export type IpAddressWhereUniqueInput = {
    ip?: string
  }

  export type IpAddressOrderByWithAggregationInput = {
    ip?: SortOrder
    machineId?: SortOrder
    _count?: IpAddressCountOrderByAggregateInput
    _max?: IpAddressMaxOrderByAggregateInput
    _min?: IpAddressMinOrderByAggregateInput
  }

  export type IpAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IpAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<IpAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IpAddressScalarWhereWithAggregatesInput>
    ip?: StringWithAggregatesFilter | string
    machineId?: StringNullableWithAggregatesFilter | string | null
  }

  export type DepartmentWhereInput = {
    AND?: Enumerable<DepartmentWhereInput>
    OR?: Enumerable<DepartmentWhereInput>
    NOT?: Enumerable<DepartmentWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    Maintenance?: MaintenanceListRelationFilter
    User?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Maintenance?: MaintenanceOrderByRelationAggregateInput
    User?: UserOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type MachineWhereInput = {
    AND?: Enumerable<MachineWhereInput>
    OR?: Enumerable<MachineWhereInput>
    NOT?: Enumerable<MachineWhereInput>
    id?: StringFilter | string
    ip?: StringFilter | string
    processor?: StringNullableFilter | string | null
    memory?: StringNullableFilter | string | null
    storage?: StringNullableFilter | string | null
    system?: StringNullableFilter | string | null
    font?: StringNullableFilter | string | null
    motherboard?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    ipAddress?: XOR<IpAddressRelationFilter, IpAddressWhereInput>
    Maintenance?: MaintenanceListRelationFilter
  }

  export type MachineOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    processor?: SortOrder
    memory?: SortOrder
    storage?: SortOrder
    system?: SortOrder
    font?: SortOrder
    motherboard?: SortOrder
    createdAt?: SortOrder
    ipAddress?: IpAddressOrderByWithRelationInput
    Maintenance?: MaintenanceOrderByRelationAggregateInput
  }

  export type MachineWhereUniqueInput = {
    id?: string
    ip?: string
  }

  export type MachineOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    processor?: SortOrder
    memory?: SortOrder
    storage?: SortOrder
    system?: SortOrder
    font?: SortOrder
    motherboard?: SortOrder
    createdAt?: SortOrder
    _count?: MachineCountOrderByAggregateInput
    _max?: MachineMaxOrderByAggregateInput
    _min?: MachineMinOrderByAggregateInput
  }

  export type MachineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MachineScalarWhereWithAggregatesInput>
    OR?: Enumerable<MachineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MachineScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ip?: StringWithAggregatesFilter | string
    processor?: StringNullableWithAggregatesFilter | string | null
    memory?: StringNullableWithAggregatesFilter | string | null
    storage?: StringNullableWithAggregatesFilter | string | null
    system?: StringNullableWithAggregatesFilter | string | null
    font?: StringNullableWithAggregatesFilter | string | null
    motherboard?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MaintenanceWhereInput = {
    AND?: Enumerable<MaintenanceWhereInput>
    OR?: Enumerable<MaintenanceWhereInput>
    NOT?: Enumerable<MaintenanceWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    departmentId?: StringFilter | string
    machineId?: StringFilter | string
    maintenanceDate?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    machine?: XOR<MachineRelationFilter, MachineWhereInput>
  }

  export type MaintenanceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    machineId?: SortOrder
    maintenanceDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type MaintenanceWhereUniqueInput = {
    id?: string
  }

  export type MaintenanceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    machineId?: SortOrder
    maintenanceDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    _count?: MaintenanceCountOrderByAggregateInput
    _max?: MaintenanceMaxOrderByAggregateInput
    _min?: MaintenanceMinOrderByAggregateInput
  }

  export type MaintenanceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MaintenanceScalarWhereWithAggregatesInput>
    OR?: Enumerable<MaintenanceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MaintenanceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    departmentId?: StringWithAggregatesFilter | string
    machineId?: StringWithAggregatesFilter | string
    maintenanceDate?: DateTimeWithAggregatesFilter | Date | string
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    Maintenance?: MaintenanceCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    departmentId?: string | null
    createdAt?: Date | string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    departmentId?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpAddressCreateInput = {
    ip: string
    machineId?: string | null
    Machine?: MachineCreateNestedOneWithoutIpAddressInput
  }

  export type IpAddressUncheckedCreateInput = {
    ip: string
    machineId?: string | null
    Machine?: MachineUncheckedCreateNestedOneWithoutIpAddressInput
  }

  export type IpAddressUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
    Machine?: MachineUpdateOneWithoutIpAddressNestedInput
  }

  export type IpAddressUncheckedUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
    Machine?: MachineUncheckedUpdateOneWithoutIpAddressNestedInput
  }

  export type IpAddressCreateManyInput = {
    ip: string
    machineId?: string | null
  }

  export type IpAddressUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IpAddressUncheckedUpdateManyInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    Maintenance?: MaintenanceCreateNestedManyWithoutDepartmentInput
    User?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutDepartmentInput
    User?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Maintenance?: MaintenanceUpdateManyWithoutDepartmentNestedInput
    User?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutDepartmentNestedInput
    User?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MachineCreateInput = {
    id?: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
    ipAddress: IpAddressCreateNestedOneWithoutMachineInput
    Maintenance?: MaintenanceCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateInput = {
    id?: string
    ip: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: IpAddressUpdateOneRequiredWithoutMachineNestedInput
    Maintenance?: MaintenanceUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MachineCreateManyInput = {
    id?: string
    ip: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
  }

  export type MachineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MachineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateInput = {
    id?: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMaintenanceInput
    department: DepartmentCreateNestedOneWithoutMaintenanceInput
    machine: MachineCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceUncheckedCreateInput = {
    id?: string
    userId: string
    departmentId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMaintenanceNestedInput
    department?: DepartmentUpdateOneRequiredWithoutMaintenanceNestedInput
    machine?: MachineUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    machineId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateManyInput = {
    id?: string
    userId: string
    departmentId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    machineId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MaintenanceListRelationFilter = {
    every?: MaintenanceWhereInput
    some?: MaintenanceWhereInput
    none?: MaintenanceWhereInput
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type MaintenanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type MachineRelationFilter = {
    is?: MachineWhereInput | null
    isNot?: MachineWhereInput | null
  }

  export type IpAddressCountOrderByAggregateInput = {
    ip?: SortOrder
    machineId?: SortOrder
  }

  export type IpAddressMaxOrderByAggregateInput = {
    ip?: SortOrder
    machineId?: SortOrder
  }

  export type IpAddressMinOrderByAggregateInput = {
    ip?: SortOrder
    machineId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IpAddressRelationFilter = {
    is?: IpAddressWhereInput
    isNot?: IpAddressWhereInput
  }

  export type MachineCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    processor?: SortOrder
    memory?: SortOrder
    storage?: SortOrder
    system?: SortOrder
    font?: SortOrder
    motherboard?: SortOrder
    createdAt?: SortOrder
  }

  export type MachineMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    processor?: SortOrder
    memory?: SortOrder
    storage?: SortOrder
    system?: SortOrder
    font?: SortOrder
    motherboard?: SortOrder
    createdAt?: SortOrder
  }

  export type MachineMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    processor?: SortOrder
    memory?: SortOrder
    storage?: SortOrder
    system?: SortOrder
    font?: SortOrder
    motherboard?: SortOrder
    createdAt?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MaintenanceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    machineId?: SortOrder
    maintenanceDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type MaintenanceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    machineId?: SortOrder
    maintenanceDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type MaintenanceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    machineId?: SortOrder
    maintenanceDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type MaintenanceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutUserInput>, Enumerable<MaintenanceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutUserInput>
    createMany?: MaintenanceCreateManyUserInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type DepartmentCreateNestedOneWithoutUserInput = {
    create?: XOR<DepartmentCreateWithoutUserInput, DepartmentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUserInput
    connect?: DepartmentWhereUniqueInput
  }

  export type MaintenanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutUserInput>, Enumerable<MaintenanceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutUserInput>
    createMany?: MaintenanceCreateManyUserInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MaintenanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutUserInput>, Enumerable<MaintenanceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MaintenanceCreateManyUserInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type DepartmentUpdateOneWithoutUserNestedInput = {
    create?: XOR<DepartmentCreateWithoutUserInput, DepartmentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUserInput
    upsert?: DepartmentUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<DepartmentUpdateWithoutUserInput, DepartmentUncheckedUpdateWithoutUserInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MaintenanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutUserInput>, Enumerable<MaintenanceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MaintenanceCreateManyUserInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type MachineCreateNestedOneWithoutIpAddressInput = {
    create?: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
    connectOrCreate?: MachineCreateOrConnectWithoutIpAddressInput
    connect?: MachineWhereUniqueInput
  }

  export type MachineUncheckedCreateNestedOneWithoutIpAddressInput = {
    create?: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
    connectOrCreate?: MachineCreateOrConnectWithoutIpAddressInput
    connect?: MachineWhereUniqueInput
  }

  export type MachineUpdateOneWithoutIpAddressNestedInput = {
    create?: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
    connectOrCreate?: MachineCreateOrConnectWithoutIpAddressInput
    upsert?: MachineUpsertWithoutIpAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: MachineWhereUniqueInput
    update?: XOR<MachineUpdateWithoutIpAddressInput, MachineUncheckedUpdateWithoutIpAddressInput>
  }

  export type MachineUncheckedUpdateOneWithoutIpAddressNestedInput = {
    create?: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
    connectOrCreate?: MachineCreateOrConnectWithoutIpAddressInput
    upsert?: MachineUpsertWithoutIpAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: MachineWhereUniqueInput
    update?: XOR<MachineUpdateWithoutIpAddressInput, MachineUncheckedUpdateWithoutIpAddressInput>
  }

  export type MaintenanceCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutDepartmentInput>, Enumerable<MaintenanceUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutDepartmentInput>
    createMany?: MaintenanceCreateManyDepartmentInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<UserCreateWithoutDepartmentInput>, Enumerable<UserUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDepartmentInput>
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type MaintenanceUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutDepartmentInput>, Enumerable<MaintenanceUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutDepartmentInput>
    createMany?: MaintenanceCreateManyDepartmentInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<UserCreateWithoutDepartmentInput>, Enumerable<UserUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDepartmentInput>
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type MaintenanceUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutDepartmentInput>, Enumerable<MaintenanceUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutDepartmentInput>
    createMany?: MaintenanceCreateManyDepartmentInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutDepartmentInput>, Enumerable<UserUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutDepartmentInput>
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type MaintenanceUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutDepartmentInput>, Enumerable<MaintenanceUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutDepartmentInput>
    createMany?: MaintenanceCreateManyDepartmentInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutDepartmentInput>, Enumerable<UserUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutDepartmentInput>
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type IpAddressCreateNestedOneWithoutMachineInput = {
    create?: XOR<IpAddressCreateWithoutMachineInput, IpAddressUncheckedCreateWithoutMachineInput>
    connectOrCreate?: IpAddressCreateOrConnectWithoutMachineInput
    connect?: IpAddressWhereUniqueInput
  }

  export type MaintenanceCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutMachineInput>, Enumerable<MaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutMachineInput>
    createMany?: MaintenanceCreateManyMachineInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type MaintenanceUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutMachineInput>, Enumerable<MaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutMachineInput>
    createMany?: MaintenanceCreateManyMachineInputEnvelope
    connect?: Enumerable<MaintenanceWhereUniqueInput>
  }

  export type IpAddressUpdateOneRequiredWithoutMachineNestedInput = {
    create?: XOR<IpAddressCreateWithoutMachineInput, IpAddressUncheckedCreateWithoutMachineInput>
    connectOrCreate?: IpAddressCreateOrConnectWithoutMachineInput
    upsert?: IpAddressUpsertWithoutMachineInput
    connect?: IpAddressWhereUniqueInput
    update?: XOR<IpAddressUpdateWithoutMachineInput, IpAddressUncheckedUpdateWithoutMachineInput>
  }

  export type MaintenanceUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutMachineInput>, Enumerable<MaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: MaintenanceCreateManyMachineInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type MaintenanceUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<MaintenanceCreateWithoutMachineInput>, Enumerable<MaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<MaintenanceCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<MaintenanceUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: MaintenanceCreateManyMachineInputEnvelope
    set?: Enumerable<MaintenanceWhereUniqueInput>
    disconnect?: Enumerable<MaintenanceWhereUniqueInput>
    delete?: Enumerable<MaintenanceWhereUniqueInput>
    connect?: Enumerable<MaintenanceWhereUniqueInput>
    update?: Enumerable<MaintenanceUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<MaintenanceUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<MaintenanceScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<UserCreateWithoutMaintenanceInput, UserUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<DepartmentCreateWithoutMaintenanceInput, DepartmentUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMaintenanceInput
    connect?: DepartmentWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutMaintenanceInput = {
    create?: XOR<MachineCreateWithoutMaintenanceInput, MachineUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: MachineCreateOrConnectWithoutMaintenanceInput
    connect?: MachineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMaintenanceNestedInput = {
    create?: XOR<UserCreateWithoutMaintenanceInput, UserUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceInput
    upsert?: UserUpsertWithoutMaintenanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMaintenanceInput, UserUncheckedUpdateWithoutMaintenanceInput>
  }

  export type DepartmentUpdateOneRequiredWithoutMaintenanceNestedInput = {
    create?: XOR<DepartmentCreateWithoutMaintenanceInput, DepartmentUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMaintenanceInput
    upsert?: DepartmentUpsertWithoutMaintenanceInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<DepartmentUpdateWithoutMaintenanceInput, DepartmentUncheckedUpdateWithoutMaintenanceInput>
  }

  export type MachineUpdateOneRequiredWithoutMaintenanceNestedInput = {
    create?: XOR<MachineCreateWithoutMaintenanceInput, MachineUncheckedCreateWithoutMaintenanceInput>
    connectOrCreate?: MachineCreateOrConnectWithoutMaintenanceInput
    upsert?: MachineUpsertWithoutMaintenanceInput
    connect?: MachineWhereUniqueInput
    update?: XOR<MachineUpdateWithoutMaintenanceInput, MachineUncheckedUpdateWithoutMaintenanceInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type MaintenanceCreateWithoutUserInput = {
    id?: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
    department: DepartmentCreateNestedOneWithoutMaintenanceInput
    machine: MachineCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceUncheckedCreateWithoutUserInput = {
    id?: string
    departmentId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceCreateOrConnectWithoutUserInput = {
    where: MaintenanceWhereUniqueInput
    create: XOR<MaintenanceCreateWithoutUserInput, MaintenanceUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceCreateManyUserInputEnvelope = {
    data: Enumerable<MaintenanceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutUserInput = {
    id?: string
    name: string
    Maintenance?: MaintenanceCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUserInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUserInput, DepartmentUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceUpsertWithWhereUniqueWithoutUserInput = {
    where: MaintenanceWhereUniqueInput
    update: XOR<MaintenanceUpdateWithoutUserInput, MaintenanceUncheckedUpdateWithoutUserInput>
    create: XOR<MaintenanceCreateWithoutUserInput, MaintenanceUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceUpdateWithWhereUniqueWithoutUserInput = {
    where: MaintenanceWhereUniqueInput
    data: XOR<MaintenanceUpdateWithoutUserInput, MaintenanceUncheckedUpdateWithoutUserInput>
  }

  export type MaintenanceUpdateManyWithWhereWithoutUserInput = {
    where: MaintenanceScalarWhereInput
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type MaintenanceScalarWhereInput = {
    AND?: Enumerable<MaintenanceScalarWhereInput>
    OR?: Enumerable<MaintenanceScalarWhereInput>
    NOT?: Enumerable<MaintenanceScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    departmentId?: StringFilter | string
    machineId?: StringFilter | string
    maintenanceDate?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type DepartmentUpsertWithoutUserInput = {
    update: XOR<DepartmentUpdateWithoutUserInput, DepartmentUncheckedUpdateWithoutUserInput>
    create: XOR<DepartmentCreateWithoutUserInput, DepartmentUncheckedCreateWithoutUserInput>
  }

  export type DepartmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Maintenance?: MaintenanceUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type MachineCreateWithoutIpAddressInput = {
    id?: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
    Maintenance?: MaintenanceCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutIpAddressInput = {
    id?: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutIpAddressInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
  }

  export type MachineUpsertWithoutIpAddressInput = {
    update: XOR<MachineUpdateWithoutIpAddressInput, MachineUncheckedUpdateWithoutIpAddressInput>
    create: XOR<MachineCreateWithoutIpAddressInput, MachineUncheckedCreateWithoutIpAddressInput>
  }

  export type MachineUpdateWithoutIpAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutIpAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MaintenanceCreateWithoutDepartmentInput = {
    id?: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMaintenanceInput
    machine: MachineCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceCreateOrConnectWithoutDepartmentInput = {
    where: MaintenanceWhereUniqueInput
    create: XOR<MaintenanceCreateWithoutDepartmentInput, MaintenanceUncheckedCreateWithoutDepartmentInput>
  }

  export type MaintenanceCreateManyDepartmentInputEnvelope = {
    data: Enumerable<MaintenanceCreateManyDepartmentInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    Maintenance?: MaintenanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    Maintenance?: MaintenanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: Enumerable<UserCreateManyDepartmentInput>
    skipDuplicates?: boolean
  }

  export type MaintenanceUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: MaintenanceWhereUniqueInput
    update: XOR<MaintenanceUpdateWithoutDepartmentInput, MaintenanceUncheckedUpdateWithoutDepartmentInput>
    create: XOR<MaintenanceCreateWithoutDepartmentInput, MaintenanceUncheckedCreateWithoutDepartmentInput>
  }

  export type MaintenanceUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: MaintenanceWhereUniqueInput
    data: XOR<MaintenanceUpdateWithoutDepartmentInput, MaintenanceUncheckedUpdateWithoutDepartmentInput>
  }

  export type MaintenanceUpdateManyWithWhereWithoutDepartmentInput = {
    where: MaintenanceScalarWhereInput
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    departmentId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type IpAddressCreateWithoutMachineInput = {
    ip: string
    machineId?: string | null
  }

  export type IpAddressUncheckedCreateWithoutMachineInput = {
    ip: string
    machineId?: string | null
  }

  export type IpAddressCreateOrConnectWithoutMachineInput = {
    where: IpAddressWhereUniqueInput
    create: XOR<IpAddressCreateWithoutMachineInput, IpAddressUncheckedCreateWithoutMachineInput>
  }

  export type MaintenanceCreateWithoutMachineInput = {
    id?: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMaintenanceInput
    department: DepartmentCreateNestedOneWithoutMaintenanceInput
  }

  export type MaintenanceUncheckedCreateWithoutMachineInput = {
    id?: string
    userId: string
    departmentId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceCreateOrConnectWithoutMachineInput = {
    where: MaintenanceWhereUniqueInput
    create: XOR<MaintenanceCreateWithoutMachineInput, MaintenanceUncheckedCreateWithoutMachineInput>
  }

  export type MaintenanceCreateManyMachineInputEnvelope = {
    data: Enumerable<MaintenanceCreateManyMachineInput>
    skipDuplicates?: boolean
  }

  export type IpAddressUpsertWithoutMachineInput = {
    update: XOR<IpAddressUpdateWithoutMachineInput, IpAddressUncheckedUpdateWithoutMachineInput>
    create: XOR<IpAddressCreateWithoutMachineInput, IpAddressUncheckedCreateWithoutMachineInput>
  }

  export type IpAddressUpdateWithoutMachineInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IpAddressUncheckedUpdateWithoutMachineInput = {
    ip?: StringFieldUpdateOperationsInput | string
    machineId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceUpsertWithWhereUniqueWithoutMachineInput = {
    where: MaintenanceWhereUniqueInput
    update: XOR<MaintenanceUpdateWithoutMachineInput, MaintenanceUncheckedUpdateWithoutMachineInput>
    create: XOR<MaintenanceCreateWithoutMachineInput, MaintenanceUncheckedCreateWithoutMachineInput>
  }

  export type MaintenanceUpdateWithWhereUniqueWithoutMachineInput = {
    where: MaintenanceWhereUniqueInput
    data: XOR<MaintenanceUpdateWithoutMachineInput, MaintenanceUncheckedUpdateWithoutMachineInput>
  }

  export type MaintenanceUpdateManyWithWhereWithoutMachineInput = {
    where: MaintenanceScalarWhereInput
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type UserCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    departmentId?: string | null
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutMaintenanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMaintenanceInput, UserUncheckedCreateWithoutMaintenanceInput>
  }

  export type DepartmentCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    User?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    name: string
    User?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutMaintenanceInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutMaintenanceInput, DepartmentUncheckedCreateWithoutMaintenanceInput>
  }

  export type MachineCreateWithoutMaintenanceInput = {
    id?: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
    ipAddress: IpAddressCreateNestedOneWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    ip: string
    processor?: string | null
    memory?: string | null
    storage?: string | null
    system?: string | null
    font?: string | null
    motherboard?: string | null
    createdAt?: Date | string
  }

  export type MachineCreateOrConnectWithoutMaintenanceInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutMaintenanceInput, MachineUncheckedCreateWithoutMaintenanceInput>
  }

  export type UserUpsertWithoutMaintenanceInput = {
    update: XOR<UserUpdateWithoutMaintenanceInput, UserUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<UserCreateWithoutMaintenanceInput, UserUncheckedCreateWithoutMaintenanceInput>
  }

  export type UserUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpsertWithoutMaintenanceInput = {
    update: XOR<DepartmentUpdateWithoutMaintenanceInput, DepartmentUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<DepartmentCreateWithoutMaintenanceInput, DepartmentUncheckedCreateWithoutMaintenanceInput>
  }

  export type DepartmentUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type MachineUpsertWithoutMaintenanceInput = {
    update: XOR<MachineUpdateWithoutMaintenanceInput, MachineUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<MachineCreateWithoutMaintenanceInput, MachineUncheckedCreateWithoutMaintenanceInput>
  }

  export type MachineUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: IpAddressUpdateOneRequiredWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    processor?: NullableStringFieldUpdateOperationsInput | string | null
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    system?: NullableStringFieldUpdateOperationsInput | string | null
    font?: NullableStringFieldUpdateOperationsInput | string | null
    motherboard?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateManyUserInput = {
    id?: string
    departmentId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutMaintenanceNestedInput
    machine?: MachineUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    machineId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceUncheckedUpdateManyWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    machineId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateManyDepartmentInput = {
    id?: string
    userId: string
    machineId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type MaintenanceUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMaintenanceNestedInput
    machine?: MachineUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Maintenance?: MaintenanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateManyMachineInput = {
    id?: string
    userId: string
    departmentId: string
    maintenanceDate?: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type MaintenanceUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMaintenanceNestedInput
    department?: DepartmentUpdateOneRequiredWithoutMaintenanceNestedInput
  }

  export type MaintenanceUncheckedUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}